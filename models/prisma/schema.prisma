generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                         String                       @id @default(uuid())
  registration_id            Int?
  gender                     String?
  username                   String                       @unique
  first_name                 String
  last_name                  String
  phone_number               String
  password                   String
  address                    String?
  email                      String?                      @default("")
  NIC                        String?
  join_date                  DateTime
  DOB                        DateTime?
  status                     Boolean                      @default(true)
  last_login                 DateTime?
  refresh_token              String?
  prefered_language          String                       @default("English")
  verified                   Boolean                      @default(false)
  profile_picture            String                       @default("https://th.bing.com/th/id/R.bae2d37c4317140a408aef6671346186?rik=2DNeSZ%2fD0xtseQ&pid=ImgRaw&r=0")
  roles                      Json
  otp                        String?
  otp_expire_at              DateTime?
  active                     Boolean                      @default(true)
  students                   students[]
  tutor                      tutor[]
  supporting_staff           supporting_staff[]
  content_reactions          content_reactions[]
  content_views              content_views[]
  comments                   comments[]                   @relation("commenter")
  comments_recieved          comments[]                   @relation("reciever")
  student_purchase_studypack student_purchase_studypack[]
  student_enrolled_course    student_enrolled_course[]
  student_attendance         student_attendance[]
  complaints                 complaints[]
  student_attempt_quiz       student_attempt_quiz[]
  posts                      posts[]
  reset_password             reset_password[]
  files                      files[]
  folders                    folders[]
  tutes                      tutes[]
  admin                      admin[]
  instStaff                  instStaff[]
  content                    content[]
  comment_reactions          comment_reactions[]
  post_reactions             post_reactions[]
  notifications              notifications[]
  reading_schedule           reading_schedule[]
  parent                     parent[]
}

model reset_password {
  username     String   @id
  otp_verified Boolean
  created_at   DateTime

  user users @relation(fields: [username], references: [username])
}

model students {
  student_id        String   @id
  grade             String?
  medium            String   @default("Sinhala")
  stream            String?
  emergency_contact Json? // {name: "name", phone_number: "phone_number"}
  school            String?
  subjects          String[] @default([])
  weak_areas        Json? // {subject: "subject", area: ["area1", "area2"]}

  user   users    @relation(fields: [student_id], references: [id])
  parent parent[]
}

model tutor {
  tutor_id       String       @id
  medium         String[]     @default(["Sinhala"])
  school         String?
  subjects       String[]
  qualifications String[]     @default([])
  email          String
  // status         tutor_status @default(ENABLED)

  user         users          @relation(fields: [tutor_id], references: [id])
  staffOnTutor staffOnTutor[]
  study_pack   study_pack[]
  courses      courses[]
}

// enum tutor_status {
//   ENABLED
//   BLOCKED
// }

model supporting_staff {
  staff_id     String         @id
  staff_title  String
  user         users          @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  staffOnTutor staffOnTutor[]
}

model staffOnTutor {
  staff_id         String
  tutor_id         String
  joined_date      DateTime @default(now())
  no_marked_papers Json     @default("{}")

  staff supporting_staff @relation(fields: [staff_id], references: [staff_id], onDelete: Cascade)
  tutor tutor            @relation(fields: [tutor_id], references: [tutor_id], onDelete: Cascade)

  @@id([staff_id, tutor_id])
}

model admin {
  admin_id       String   @id
  emergency_No   String
  admin_role     String
  qualifications String[]

  user users @relation(fields: [admin_id], references: [id])
}

model instStaff {
  inst_staff_id  String   @id @default(uuid())
  qualifications String[] @default([])
  emergency_No   String?

  user users @relation(fields: [inst_staff_id], references: [id])
}

model files {
  id            String   @id @default(uuid())
  name          String
  path          String
  uploaded_at   DateTime
  mime_type     String
  uploaded_by   String
  original_name String
  url           String?

  user users @relation(fields: [uploaded_by], references: [id])
}

model folders {
  id        String   @id
  user_name String
  name      String
  tute_ids  String[] @default([])

  user users @relation(fields: [user_name], references: [username])
}

model tutes {
  id         String   @id
  folder_id  String   @default("")
  user_name  String
  content    String?
  file_id    String   @default("")
  created_at DateTime
  name       String
  gcs_name   String?
  url        String?
  local_url  String?
  isUpload   Boolean  @default(false)

  user users @relation(fields: [user_name], references: [username])
}

enum content_type {
  TUTE
  VIDEO
}

enum content_status {
  PUBLIC
  PAID
  HOLD
}

model content {
  id                String              @id @default(uuid())
  title             String
  description       String
  user_id           String
  type              content_type?
  subject           String
  subject_areas     String[]
  uploaded_at       DateTime?           @default(now())
  status            content_status?     @default(PUBLIC)
  file_path         String?
  thumbnail         String?
  reactions         Json?               @default("{}") // {like: 0, dislike: 0, views: 0 ,comments: 0}
  content_reactions content_reactions[]
  content_views     content_views[]
  comments          comments[]

  user users @relation(fields: [user_id], references: [id])
}

model content_reactions {
  id         String   @id @default(uuid())
  user_id    String
  content_id String   @default("")
  islike     Boolean?

  user    users   @relation(fields: [user_id], references: [id])
  content content @relation(fields: [content_id], references: [id])
}

model content_views {
  user_id    String
  content_id String
  watch_time String? //28:00

  user    users   @relation(fields: [user_id], references: [id])
  content content @relation(fields: [content_id], references: [id])

  @@id([user_id, content_id])
}

model comments {
  id          String   @id @default(uuid())
  user_id     String
  content_id  String?  @default("")
  post_id     String?  @default("")
  message     String
  parent_id   String?  @default("")
  replied_to  String?  @default("")
  reply_count Int      @default(0)
  posted_at   DateTime @default(now())

  replies           comments[]          @relation("parent")
  commenter         users               @relation("commenter", fields: [user_id], references: [id])
  reciever          users?              @relation("reciever", fields: [replied_to], references: [id])
  content           content?            @relation(fields: [content_id], references: [id])
  post              posts?              @relation(fields: [post_id], references: [id])
  parent            comments?           @relation("parent", fields: [parent_id], references: [id])
  comment_reactions comment_reactions[]
}

model comment_reactions {
  user_id    String
  comment_id String
  islike     Boolean?

  user    users    @relation(fields: [user_id], references: [id])
  comment comments @relation(fields: [comment_id], references: [id])

  @@id([user_id, comment_id])
}

enum study_pack_type {
  NORMAL
  PAID
}

enum visibility {
  PUBLIC
  PRIVATE
}

model study_pack {
  id            String          @id @default(uuid())
  tutor_id      String
  course_id     String          @default("")
  title         String
  description   String
  subject       String
  subject_areas String[]
  thumbnail     String?
  type          study_pack_type
  visibility    visibility       @default(PRIVATE)

  price         Int
  access_period Json?     @default("{}") // {days: 0, months: 0, years: 0}
  uploaded_at   DateTime  @default(now())
  content_ids   Json[]    @default([])
  public_ids   Json[]    @default([]) // [{video_id: [], tute_id: []},{video_id: [], tute_id: "tute_id"}] 
  expire_date   DateTime?
  start         String?

  tutor                      tutor                        @relation(fields: [tutor_id], references: [tutor_id])
  course                     courses                      @relation(fields: [course_id], references: [id])
  student_purchase_studypack student_purchase_studypack[]
}

enum payment_type {
  ONLINE
  PHYSICAL
}

enum payment_status {
  PENDING
  PAID
  FAILED
}

enum payment_for {
  EXTEND
  PURCHASE
}

model student_purchase_studypack {
  id               String         @id @default(uuid())
  student_id       String
  pack_id          String
  reciept_location String
  ammount          Int
  type             payment_type
  purchased_at     DateTime       @default(now())
  expire_date      DateTime
  status           payment_status @default(PENDING)
  payment_for      payment_for    @default(PURCHASE)

  student users      @relation(fields: [student_id], references: [id])
  pack    study_pack @relation(fields: [pack_id], references: [id])
}

enum course_visibility {
  PUBLIC
  PRIVATE
}

model courses {
  id            String        @id @default(uuid())
  tutor_id      String
  title         String
  description   String
  subject       String
  medium        String
  grade         String
  thumbnail     String
  monthly_fee   Int
  visibility    course_visibility      @default(PRIVATE)
  hall_id       String?
  content_ids   Json[]   @default([])
  announcements   Json[]   @default([])
  start_date    DateTime @default(now())
  studypack_ids Json[]   @default([]) // [{video_id: [], tute_id: []},{video_id: [], tute_id: "tute_id"}] 
  schedule      Json[]   @default([]) // [{day: "monday", start_time: "10:00", end_time: "12:00"},{day: "monday", start_time: "10:00", end_time: "12:00"}]
  status        course_status @default(PENDING)

  tutor                   tutor                     @relation(fields: [tutor_id], references: [tutor_id])
  hall                    halls?                    @relation(fields: [hall_id], references: [id])
  study_pack              study_pack[]
  student_enrolled_course student_enrolled_course[]
  student_attendance      student_attendance[]
  hall_schedule           hall_schedule[]
  quiz                    quiz[]
  forum                   forum[]
  poll                    poll[]
}

enum course_status {
  PENDING
  APPROVED
  REJECTED
}

model student_enrolled_course {
  student_id  String
  course_id   String
  enrolled_at DateTime @default(now())

  student users   @relation(fields: [student_id], references: [id])
  course  courses @relation(fields: [course_id], references: [id])

  @@id([student_id, course_id])
}

model student_attendance {
  student_id String
  course_id  String
  date       DateTime
  is_present Boolean  @default(false)

  student users   @relation(fields: [student_id], references: [id])
  course  courses @relation(fields: [course_id], references: [id])

  @@id([student_id, course_id, date])
}

model halls {
  id           String @id @default(uuid())
  name         String
  capacity     Int
  hall_profile String
  facilities   String

  schedule      Json[]          @default([]) // [{day: "monday", start_time: "10:00", end_time: "12:00"},{day: "monday", start_time: "10:00", end_time: "12:00"}]
  courses       courses[]
  hall_schedule hall_schedule[]
}

enum schedule_type {
  RECURRING
  ONE_TIME
}

model hall_schedule {
  hall_id    String
  day        String
  date       DateTime?
  start_time String
  end_time   String
  type       schedule_type
  course_id  String

  hall   halls   @relation(fields: [hall_id], references: [id])
  course courses @relation(fields: [course_id], references: [id])

  @@id([hall_id, day, start_time, end_time])
}

enum complaint_type {
  COURSE_RELATED
  OTHER
}

model complaints {
  id        String          @id @default(uuid())
  user_id   String
  type      complaint_type
  course_id String?
  action    String?         @default("")
  post_id   String?
  message   String
  posted_at DateTime        @default(now())
  // resolved  Boolean        @default(false)
  status    ComplaintStatus @default(NEW)
  user      users           @relation(fields: [user_id], references: [id])
}

enum ComplaintStatus {
  NEW
  IN_ACTION
}

model mcq_category {
  id                  String   @id @default(uuid())
  title               String
  number_of_questions Int
  question_ids        String[]
}

model quiz {
  id                  String    @id @default(uuid())
  course_id           String?   @default("")
  study_pack_id       String?
  title               String
  start_time          DateTime?
  end_time            DateTime?
  duration            String?
  subject             String
  subject_areas       String[]  @default([])
  question_ids        String[]
  number_of_questions Int
  published           Boolean   @default(false)

  course               courses?               @relation(fields: [course_id], references: [id])
  student_attempt_quiz student_attempt_quiz[]
}

model questions {
  id               String   @id @default(uuid())
  question         String
  points           Int
  difficulty_level String
  options          String[] @default([])
  explanation      String
  subject          String
  subject_areas    String[] @default([])
  correct_answer   Int
}

model student_attempt_quiz {
  student_id String
  quiz_id    String
  score      Int
  started_at DateTime @default(now())
  ended_at   DateTime
  answers    Int[]    @default([]) // [{question_id: "question_id", answer: "answer"},{question_id: "question_id", answer: "answer"}]

  student users @relation(fields: [student_id], references: [id])
  quiz    quiz  @relation(fields: [quiz_id], references: [id])

  @@id([student_id, quiz_id])
}

model student_generate_quiz {
  id              String    @id
  username        String
  mcq_ids         String[]
  user_answers    Int[]     @default([])
  correct_answers Int[]
  subject         String
  quiz_name       String
  start_time      DateTime?
  end_time        DateTime?
  date            DateTime
  done            Boolean   @default(false)
  mark            Int       @default(0)
}

model forum {
  id    String @id
  title String

  course courses @relation(fields: [id], references: [id])
  posts  posts[]
}

model posts {
  id        String   @id @default(uuid())
  forum_id  String
  user_id   String
  title     String
  message   String
  posted_at DateTime @default(now())
  reactions Json     @default("{}") // {like: 0, dislike: 0, views: 0 ,comments: 0}

  forum          forum            @relation(fields: [forum_id], references: [id])
  user           users            @relation(fields: [user_id], references: [id])
  comments       comments[]
  attachments    attachments[]
  post_reactions post_reactions[]
}

model post_reactions {
  id      String   @id @default(uuid())
  user_id String
  post_id String   @default("")
  islike  Boolean?

  user users @relation(fields: [user_id], references: [id])
  post posts @relation(fields: [post_id], references: [id])
}

enum attachment_type {
  IMAGE
  DOCUMENT
}

model attachments {
  id        String          @id @default(uuid())
  post_id   String
  type      attachment_type
  file_path String

  post posts @relation(fields: [post_id], references: [id])
}

model poll {
  id        String   @id @default(uuid())
  course_id String
  question  String
  options   String[] @default([]) //
  votes     Json   @default("{}") // {option1: 0, option2: 0, option3: 0, option4: 0}
  datetime  DateTime @default(now())
  user_id   String[] @default([])
  course courses @relation(fields: [course_id], references: [id])
}

model notifications {
  id         String   @id @default(uuid())
  message    String
  date       DateTime @default(now())
  url        String?
  sender_id  String
  reciver_id String

  sender users @relation(fields: [sender_id], references: [id])
}

model reading_schedule {
  id       String @id @default(uuid())
  schedule Json   @default("{}")
  user_id  String

  user users @relation(fields: [user_id], references: [id])
}

model parent {
  id       String @id
  child_id String

  user  users    @relation(fields: [id], references: [id])
  child students @relation(fields: [child_id], references: [student_id])
}
